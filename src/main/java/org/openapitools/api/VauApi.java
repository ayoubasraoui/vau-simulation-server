/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BadFormattedErrorMessage;
import org.openapitools.model.BadFormattedErrorMessage1;
import org.openapitools.model.BadFormattedErrorMessage2;
import org.openapitools.model.EncryptedPayload;
import org.openapitools.model.GenericErrorMessage;
import org.openapitools.model.GenericErrorMessage1;
import org.openapitools.model.MerchantEnrolmentRequest;
import org.openapitools.model.MerchantEnrolmentResponse;
import org.openapitools.model.MerchantSearchRequest;
import org.openapitools.model.MerchantSearchResponse;
import org.openapitools.model.OutboundResponse;
import org.openapitools.model.RejectedMerchantEnrollmentResponse;
import org.openapitools.model.RejectedMerchantSearchResponse;
import org.openapitools.model.RejectedRequestResponse;
import org.openapitools.model.RejectedRequestResponse1;
import org.openapitools.model.RejectedStopAdviceRequestResponse;
import org.openapitools.model.Request;
import org.openapitools.model.Response;
import org.openapitools.model.StopAdviceRequest;
import org.openapitools.model.StopAdviceResponse;
import org.openapitools.model.SubscriptionDeleteRequest;
import org.openapitools.model.SubscriptionDeleteResponse;
import org.openapitools.model.SubscriptionInquiryRequest;
import org.openapitools.model.SubscriptionInquiryResponse;
import org.openapitools.model.SubscriptionRequest;
import org.openapitools.model.SubscriptionResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;


import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-17T15:26:51.744576900+01:00[Africa/Casablanca]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Visa Account Updater Acquirer API", description = "Visa Account Updater Acquirer API")
public interface VauApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /vau/acquirer-api/v1/inquiry : Acquirer API for PANs Inquiry
     * Retrieve the new PANs information for requested old PANs.
     *
     * @param inquiryRequest inquiryRequest (required)
     * @return This response code will be returned in scenarios where the inquiry is successful, all possible response codes are explained below in the model. (status code 200)
     *         or This response code will be returned in scenarios where the inquiry is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the inquiry is rejected, all possible reasons for request rejection are explained below in the model. (status code 409)
     *         or This response code will be returned in scenarios where the inquiry could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "inquiryUsingPOST",
        summary = "Acquirer API for PANs Inquiry",
        description = "Retrieve the new PANs information for requested old PANs.",
        tags = { "Visa Account Updater Acquirer API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where the inquiry is successful, all possible response codes are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the inquiry is badly formatted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage1.class))
            }),
            @ApiResponse(responseCode = "409", description = "This response code will be returned in scenarios where the inquiry is rejected, all possible reasons for request rejection are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RejectedRequestResponse1.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the inquiry could not be sucessfully processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage1.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/acquirer-api/v1/inquiry",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Response> inquiryUsingPOST(
        @Parameter(name = "inquiryRequest", description = "inquiryRequest", required = true) @Valid @RequestBody Request inquiryRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejects\" : [ { \"cardholderAccountNumber\" : \"800000XX00000000\", \"rejectReason\" : \"Account Number does not start with 2, 3, 4, 5 or 6\", \"rejectReasonCode\" : \"1\", \"expirationDate\" : \"2204\" }, { \"cardholderAccountNumber\" : \"800000XX00000000\", \"rejectReason\" : \"Account Number does not start with 2, 3, 4, 5 or 6\", \"rejectReasonCode\" : \"1\", \"expirationDate\" : \"2204\" } ], \"acquirerSegmentId\" : 2, \"merchantId\" : \"000000705853\", \"responses\" : [ { \"previouslySentFlag\" : \"Y\", \"newCardholderAccountNumber\" : \"400000XX00000001\", \"oldExpirationDate\" : \"2204\", \"newExpirationDate\" : \"2204\", \"oldCardholderAccountNumber\" : \"400000XX00000000\", \"serviceIdentifier\" : \"A\" }, { \"previouslySentFlag\" : \"Y\", \"newCardholderAccountNumber\" : \"400000XX00000001\", \"oldExpirationDate\" : \"2204\", \"newExpirationDate\" : \"2204\", \"oldCardholderAccountNumber\" : \"400000XX00000000\", \"serviceIdentifier\" : \"A\" } ], \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 9992, \"rejectReason\" : \"Acquirer segment is not enrolled\", \"merchantId\" : \"000000705853\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\", \"rejectReasonCode\" : \"A\", \"acquirerInformation\" : \"180720216995565000113 XXXXAIBR\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/onboard-api/acquirer/v1/merchants : Merchant Enrollment
     * Enroll new merchants by providing following requested information
     *
     * @param merchantEnrolmentRequest  (required)
     * @param accept  (optional)
     * @return This response code will be returned in scenarios where the merchant enrolment is successful, all possible response codes are explained below in the model. (status code 200)
     *         or This response code will be returned in scenarios where the merchant enrolment is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the merchant enrolment is rejected, all possible reasons for request rejection are explained below in the model. (status code 409)
     *         or This response code will be returned in scenarios where the merchant enrolment could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "merchantEnrolmentUsingPOST",
        summary = "Merchant Enrollment",
        description = "Enroll new merchants by providing following requested information",
        tags = { "Visa Account Updater Merchant API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where the merchant enrolment is successful, all possible response codes are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MerchantEnrolmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the merchant enrolment is badly formatted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage.class))
            }),
            @ApiResponse(responseCode = "409", description = "This response code will be returned in scenarios where the merchant enrolment is rejected, all possible reasons for request rejection are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RejectedMerchantEnrollmentResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the merchant enrolment could not be sucessfully processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/onboard-api/acquirer/v1/merchants",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MerchantEnrolmentResponse> merchantEnrolmentUsingPOST(
        @Parameter(name = "MerchantEnrolmentRequest", description = "", required = true) @Valid @RequestBody MerchantEnrolmentRequest merchantEnrolmentRequest,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 2, \"merchants\" : [ { \"merchantId\" : \"000000705853\", \"reject\" : { \"rejectCode\" : \"M\", \"rejectMessage\" : \"Merchant Id already exists for this Acquirer Segment\" }, \"enrollStatus\" : \"Reject\", \"merchantName\" : \"GS PERFORMANCE\" }, { \"merchantId\" : \"000000705853\", \"reject\" : { \"rejectCode\" : \"M\", \"rejectMessage\" : \"Merchant Id already exists for this Acquirer Segment\" }, \"enrollStatus\" : \"Reject\", \"merchantName\" : \"GS PERFORMANCE\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 9992, \"rejectReason\" : \"Acquirer segment is not enrolled\", \"rejectReasonCode\" : \"A\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/onboard-api/acquirer/v1/merchants/search : Merchant Search
     * Merchants can be searched by providing following requested information
     *
     * @param merchantSearchRequest  (required)
     * @param accept  (optional)
     * @return This response code will be returned in scenarios where the merchant search is successful, all possible response codes are explained below in the model. (status code 200)
     *         or This response code will be returned in scenarios where the merchant search is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the merchant search is rejected, all possible reasons for request rejection are explained below in the model. (status code 409)
     *         or This response code will be returned in scenarios where the merchant search could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "merchantSearchUsingPOST",
        summary = "Merchant Search",
        description = "Merchants can be searched by providing following requested information",
        tags = { "Visa Account Updater Merchant API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where the merchant search is successful, all possible response codes are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MerchantSearchResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the merchant search is badly formatted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage.class))
            }),
            @ApiResponse(responseCode = "409", description = "This response code will be returned in scenarios where the merchant search is rejected, all possible reasons for request rejection are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RejectedMerchantSearchResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the merchant search could not be sucessfully processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/onboard-api/acquirer/v1/merchants/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MerchantSearchResponse> merchantSearchUsingPOST(
        @Parameter(name = "MerchantSearchRequest", description = "", required = true) @Valid @RequestBody MerchantSearchRequest merchantSearchRequest,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 2, \"merchants\" : [ { \"cardAcceptorId\" : \"8403435453\", \"merchantStatus\" : \"Active\", \"city\" : \"Dallas\", \"contactEmail\" : \"john@glockstor.com\", \"contactName\" : \"John\", \"postalCode\" : \"75231\", \"streetAddress1\" : \"8144 Walnut Hill Lane\", \"streetAddress2\" : \"4th cross\", \"merchantDescriptor\" : \"GS PERFORMANCE\", \"internetAddress\" : \"https://www.glockstor.com\", \"merchantLineBusiness\" : \"Online Service\", \"merchantName\" : \"GS PERFORMANCE\", \"parentCompany\" : \"GS PERFORMANCE\", \"merchantId\" : \"000000705853\", \"reject\" : { \"rejectCode\" : \"I\", \"rejectMessage\" : \"Merchant ID must be 12 characters\" }, \"countryCode\" : \"840\", \"merchantCategoryCode\" : \"5735\", \"state\" : \"TX\", \"contactPhone\" : \"840909090\", \"merchantAcquiringIdentifiers\" : [ \"312345\", \"312344\" ] }, { \"cardAcceptorId\" : \"8403435453\", \"merchantStatus\" : \"Active\", \"city\" : \"Dallas\", \"contactEmail\" : \"john@glockstor.com\", \"contactName\" : \"John\", \"postalCode\" : \"75231\", \"streetAddress1\" : \"8144 Walnut Hill Lane\", \"streetAddress2\" : \"4th cross\", \"merchantDescriptor\" : \"GS PERFORMANCE\", \"internetAddress\" : \"https://www.glockstor.com\", \"merchantLineBusiness\" : \"Online Service\", \"merchantName\" : \"GS PERFORMANCE\", \"parentCompany\" : \"GS PERFORMANCE\", \"merchantId\" : \"000000705853\", \"reject\" : { \"rejectCode\" : \"I\", \"rejectMessage\" : \"Merchant ID must be 12 characters\" }, \"countryCode\" : \"840\", \"merchantCategoryCode\" : \"5735\", \"state\" : \"TX\", \"contactPhone\" : \"840909090\", \"merchantAcquiringIdentifiers\" : [ \"312345\", \"312344\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 9992, \"rejectReason\" : \"Acquirer segment is not enrolled\", \"rejectReasonCode\" : \"A\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/registration-api/v1/callbackconfiguration : Push Subscribe Callback API
     * Push Subscribe Callback API
     *
     * @param encryptedPayload  (required)
     * @param keyId VDP MLE keyId used for encryption and decryption (optional)
     * @param xCorrelationID Correlation ID for tracking requests (optional)
     * @param accept  (optional)
     * @return This response code will be returned in scenarios where account update processing is successful. All possible response codes are explained in the model (status code 200)
     *         or This response code will be returned in scenarios where the request is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the ping test request could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "mockAccountUpdateResponse",
        summary = "Push Subscribe Callback API",
        description = "Push Subscribe Callback API",
        tags = { "Push Subscribe Callback API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where account update processing is successful. All possible response codes are explained in the model", content = {
                @Content(mediaType = "aplications/json", schema = @Schema(implementation = OutboundResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = OutboundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the request is badly formatted.", content = {
                @Content(mediaType = "aplications/json", schema = @Schema(implementation = BadFormattedErrorMessage2.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage2.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the ping test request could not be sucessfully processed.", content = {
                @Content(mediaType = "aplications/json", schema = @Schema(implementation = GenericErrorMessage.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/registration-api/v1/callbackconfiguration",
        produces = { "aplications/json", "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OutboundResponse> mockAccountUpdateResponse(
        @Parameter(name = "EncryptedPayload", description = "", required = true) @Valid @RequestBody EncryptedPayload encryptedPayload,
        @Parameter(name = "keyId", description = "VDP MLE keyId used for encryption and decryption", in = ParameterIn.HEADER) @RequestHeader(value = "keyId", required = false) String keyId,
        @Parameter(name = "X-Correlation-ID", description = "Correlation ID for tracking requests", in = ParameterIn.HEADER) @RequestHeader(value = "X-Correlation-ID", required = false) String xCorrelationID,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("aplications/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: aplications/json";
                    ApiUtil.setExampleResponse(request, "aplications/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 2, \"merchantId\" : \"000000705853\", \"requestId\" : \"e719f768-85eb-4e50-8259-87f5d2fc2fbe\", \"accountUpdates\" : [ { \"oldExpirationDate\" : \"2204\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\", \"oldCardholderAccountNumber\" : \"400000XX00000000\", \"responseCode\" : \"SUCCESS\" }, { \"oldExpirationDate\" : \"2204\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\", \"oldCardholderAccountNumber\" : \"400000XX00000000\", \"responseCode\" : \"SUCCESS\" } ], \"subMerchantName\" : \"SUB-MERCHANT-NAME\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("aplications/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: aplications/json";
                    ApiUtil.setExampleResponse(request, "aplications/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("aplications/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: aplications/json";
                    ApiUtil.setExampleResponse(request, "aplications/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/issuer-api/v1/stopadvices : Issuer Stop Advice API
     * Issuer can place stop advice by providing following requested information
     *
     * @param stopAdviceRequest  (required)
     * @param accept  (optional)
     * @return This response code will be returned in scenarios where the stop advice is successful, all possible response codes are explained below in the model. (status code 200)
     *         or This response code will be returned in scenarios where the stop advice is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the stop advice is rejected, all possible reasons for request rejection are explained below in the model. (status code 409)
     *         or This response code will be returned in scenarios where the stop advice could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "stopAdviceUsingPOST",
        summary = "Issuer Stop Advice API",
        description = "Issuer can place stop advice by providing following requested information",
        tags = { "Issuer Stop Advice API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where the stop advice is successful, all possible response codes are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StopAdviceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the stop advice is badly formatted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage.class))
            }),
            @ApiResponse(responseCode = "409", description = "This response code will be returned in scenarios where the stop advice is rejected, all possible reasons for request rejection are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RejectedStopAdviceRequestResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the stop advice could not be sucessfully processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/issuer-api/v1/stopadvices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<StopAdviceResponse> stopAdviceUsingPOST(
        @Parameter(name = "StopAdviceRequest", description = "", required = true) @Valid @RequestBody StopAdviceRequest stopAdviceRequest,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejects\" : [ { \"cardholderAccountNumber\" : \"400000XX00000000\", \"cardAcceptorId\" : \"89389898\", \"rejectCode\" : \"G\", \"rejectMessage\" : \"Account Number contains non-numeric characters or is blank\", \"startDate\" : \"2000-01-23\", \"merchantName\" : \"TestMerchant\" }, { \"cardholderAccountNumber\" : \"400000XX00000000\", \"cardAcceptorId\" : \"89389898\", \"rejectCode\" : \"G\", \"rejectMessage\" : \"Account Number contains non-numeric characters or is blank\", \"startDate\" : \"2000-01-23\", \"merchantName\" : \"TestMerchant\" } ], \"issuerSegmentId\" : 2, \"responses\" : [ { \"cardholderAccountNumber\" : \"400000XX00000000\", \"cardAcceptorId\" : \"89389898\", \"responseMessage\" : \"Stop advice applied in both RTVAU and VAU\", \"startDate\" : \"2000-01-23\", \"merchantName\" : \"TestMerchant\", \"responseCode\" : \"1\" }, { \"cardholderAccountNumber\" : \"400000XX00000000\", \"cardAcceptorId\" : \"89389898\", \"responseMessage\" : \"Stop advice applied in both RTVAU and VAU\", \"startDate\" : \"2000-01-23\", \"merchantName\" : \"TestMerchant\", \"responseCode\" : \"1\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issuerSegmentId\" : 2, \"rejectReason\" : \"Issuer segment is not enrolled\", \"rejectReasonCode\" : \"A\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/subscription-api/v1/subscriptions : Subscription API
     * Subscribes the PANs.
     *
     * @param subscriptionRequest  (required)
     * @param accept  (optional)
     * @return This response code will be returned in scenarios where the subscription is Success or AlreadySubscribed or Reject, all possible response codes are explained below in the model. (status code 200)
     *         or This response code will be returned in scenarios where the subscription request is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the subscription is rejected, all possible reasons for request rejection are explained below in the model. (status code 409)
     *         or This response code will be returned in scenarios where the subscription could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "subscribeUsingPOST",
        summary = "Subscription API",
        description = "Subscribes the PANs.",
        tags = { "Visa Account Updater Subscription API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where the subscription is Success or AlreadySubscribed or Reject, all possible response codes are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the subscription request is badly formatted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage.class))
            }),
            @ApiResponse(responseCode = "409", description = "This response code will be returned in scenarios where the subscription is rejected, all possible reasons for request rejection are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RejectedRequestResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the subscription could not be sucessfully processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/subscription-api/v1/subscriptions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SubscriptionResponse> subscribeUsingPOST(
        @Parameter(name = "SubscriptionRequest", description = "", required = true) @Valid @RequestBody SubscriptionRequest subscriptionRequest,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subscriptions\" : [ { \"cardholderAccountNumber\" : \"400000XX00000000\", \"reject\" : { \"rejectReason\" : \"Account Number contains non-numeric characters or is blank\", \"rejectReasonCode\" : \"3\" }, \"subscribedStatus\" : \"Success\", \"newCardholderAccountNumber\" : \"400000XX00000000\", \"newExpirationDate\" : \"2204\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\", \"expirationDate\" : \"2204\", \"serviceIdentifier\" : \"A\" }, { \"cardholderAccountNumber\" : \"400000XX00000000\", \"reject\" : { \"rejectReason\" : \"Account Number contains non-numeric characters or is blank\", \"rejectReasonCode\" : \"3\" }, \"subscribedStatus\" : \"Success\", \"newCardholderAccountNumber\" : \"400000XX00000000\", \"newExpirationDate\" : \"2204\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\", \"expirationDate\" : \"2204\", \"serviceIdentifier\" : \"A\" } ], \"acquirerSegmentId\" : 2, \"merchantId\" : \"000000705853\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 9992, \"rejectReason\" : \"Acquirer segment is not enrolled\", \"merchantId\" : \"000000705853\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\", \"rejectReasonCode\" : \"A\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/subscription-api/v1/subscriptions/delete : Delete PAN subscriptions
     *
     * @param subscriptionDeleteRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "subscriptionDeleteUsingPOST",
        summary = "Delete PAN subscriptions",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionDeleteResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/subscription-api/v1/subscriptions/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SubscriptionDeleteResponse> subscriptionDeleteUsingPOST(
        @Parameter(name = "SubscriptionDeleteRequest", description = "", required = true) @Valid @RequestBody SubscriptionDeleteRequest subscriptionDeleteRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subscriptions\" : [ { \"cardholderAccountNumber\" : \"400000XX00000000\", \"reject\" : { \"rejectReason\" : \"Account Number contains non-numeric characters or is blank\", \"rejectReasonCode\" : \"3\" }, \"deleteStatus\" : \"Success\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\" }, { \"cardholderAccountNumber\" : \"400000XX00000000\", \"reject\" : { \"rejectReason\" : \"Account Number contains non-numeric characters or is blank\", \"rejectReasonCode\" : \"3\" }, \"deleteStatus\" : \"Success\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\" } ], \"acquirerSegmentId\" : 2, \"merchantId\" : \"000000705853\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vau/subscription-api/v1/subscriptions/inquiry : Inquiry API
     * Retrieve the Accounts subscription information
     *
     * @param subscriptionInquiryRequest  (required)
     * @param accept  (optional)
     * @return This response code will be returned in scenarios where the subscription inquiry is Success or Reject, all possible response codes are explained below in the model. (status code 200)
     *         or This response code will be returned in scenarios where the subscription inquiry request is badly formatted. (status code 400)
     *         or This response code will be returned in scenarios where the subscription is rejected, all possible reasons for request rejection are explained below in the model. (status code 409)
     *         or This response code will be returned in scenarios where the subscription inquiry could not be sucessfully processed. (status code 500)
     */
    @Operation(
        operationId = "subscriptionInquiryUsingPOST",
        summary = "Inquiry API",
        description = "Retrieve the Accounts subscription information",
        tags = { "Visa Account Updater Subscription API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This response code will be returned in scenarios where the subscription inquiry is Success or Reject, all possible response codes are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionInquiryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "This response code will be returned in scenarios where the subscription inquiry request is badly formatted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadFormattedErrorMessage.class))
            }),
            @ApiResponse(responseCode = "409", description = "This response code will be returned in scenarios where the subscription is rejected, all possible reasons for request rejection are explained below in the model.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RejectedRequestResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "This response code will be returned in scenarios where the subscription inquiry could not be sucessfully processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vau/subscription-api/v1/subscriptions/inquiry",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SubscriptionInquiryResponse> subscriptionInquiryUsingPOST(
        @Parameter(name = "SubscriptionInquiryRequest", description = "", required = true) @Valid @RequestBody SubscriptionInquiryRequest subscriptionInquiryRequest,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subscriptions\" : [ { \"cardholderAccountNumber\" : \"400000XX00000000\", \"reject\" : { \"rejectReason\" : \"Account Number contains non-numeric characters or is blank\", \"rejectReasonCode\" : \"3\" }, \"subscribedStatus\" : \"subscribedStatus\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\" }, { \"cardholderAccountNumber\" : \"400000XX00000000\", \"reject\" : { \"rejectReason\" : \"Account Number contains non-numeric characters or is blank\", \"rejectReasonCode\" : \"3\" }, \"subscribedStatus\" : \"subscribedStatus\", \"acquirerOrMerchantProprietaryInfo\" : \"180720216995565000113 XXXXAIBR\" } ], \"acquirerSegmentId\" : 2, \"merchantId\" : \"000000705853\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Request is badly formatted and/or the required field(s) is (are) missing\", \"rejectReasonCode\" : \"B\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"acquirerSegmentId\" : 9992, \"rejectReason\" : \"Acquirer segment is not enrolled\", \"merchantId\" : \"000000705853\", \"subMerchantName\" : \"SUB-MERCHANT-NAME\", \"rejectReasonCode\" : \"A\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rejectReason\" : \"Internal Server Error, please try again after sometime\", \"rejectReasonCode\" : \"E\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
